"use strict";(self.webpackChunkneon_webdocs=self.webpackChunkneon_webdocs||[]).push([[7591],{2151:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var s=r(5893),o=r(1151);const i={toc_max_heading_level:2},t="raw",a={id:"neon/configuration/loader/modules/parsers/raw/index",title:"raw",description:"The raw parser loads a resource and store its response.",source:"@site/docs/neon/configuration/loader/modules/parsers/raw/index.md",sourceDirName:"neon/configuration/loader/modules/parsers/raw",slug:"/neon/configuration/loader/modules/parsers/raw/",permalink:"/neon-webdocs/neon/configuration/loader/modules/parsers/raw/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{toc_max_heading_level:2},sidebar:"docsSidebar",previous:{title:"Loader",permalink:"/neon-webdocs/neon/configuration/loader/loader/"},next:{title:"json",permalink:"/neon-webdocs/neon/configuration/loader/modules/parsers/json/"}},c={},l=[{value:"Example configuration",id:"example-configuration",level:2},{value:"Directives",id:"directives",level:2},{value:"<code>resource</code>",id:"resource",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"raw",children:"raw"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"raw"})," parser loads a resource and store its response."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#example-configuration",children:"Example configuration"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#resource",children:(0,s.jsx)(n.code,{children:"resource"})})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"example-configuration",children:"Example configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"fetcher:\n  providers:\n    api:\n      rest:\n        headers:\n          Content-Type: application/json\n\nloader:\n  rules:\n    load-post1:\n      # highlight-start\n      raw:\n        resource:\n          post1:\n            api:\n              method: GET\n              url: https://<backend_url>/api/v1/posts/1\n      # highlight-end\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The provider ",(0,s.jsx)(n.strong,{children:"api"})," is defined to use the ",(0,s.jsx)(n.code,{children:"rest"})," provider which fetches a remote JSON API."]}),"\n",(0,s.jsxs)(n.li,{children:["The loader has the rule ",(0,s.jsx)(n.strong,{children:"load-post1"})," which executes the parser ",(0,s.jsx)(n.code,{children:"raw"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The parser ",(0,s.jsx)(n.code,{children:"raw"})," triggers the provider ",(0,s.jsx)(n.strong,{children:"api"})," to fetch the resource ",(0,s.jsx)(n.strong,{children:"post1"})," and to store/refresh the server state."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"directives",children:"Directives"}),"\n",(0,s.jsx)(n.h3,{id:"resource",children:(0,s.jsx)(n.code,{children:"resource"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"    Syntax:         resource:\n    Type:           object\n    Default:        -\n"})}),"\n",(0,s.jsx)(n.p,{children:"The resource to load."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"resource:\n  posts:\n    api:\n      # resource configuration\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>a,a:()=>t});var s=r(7294);const o={},i=s.createContext(o);function t(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);